Issues in Your Code
Array selectedModifierGroupsEdit becomes empty after deleting a modifier.

The issue is likely due to incorrect filtering logic in the delete-group-edit event.
Newly added modifier group creates duplicate entries.

This is likely happening because:
You're not checking if the group already exists before adding it.
The setTimeout function might be appending the same item multiple times.
âœ… Fix for Delete Issue
In your delete event:

js
Copy code
$(document).on("click", ".delete-group-edit", function () {
    var deleteid = $(this).data('groupid'); // Get the group ID to delete
    console.log("Deleting Modifier Group ID:", deleteid);

    // Remove the element from the DOM
    $(this).closest(".modifier-group").remove();

    // **Correct filtering to remove only the selected group**
    selectedModifierGroupsEdit = selectedModifierGroupsEdit.filter(modifier => 
        modifier.modifierGroupId !== deleteid
    );

    console.log("Updated Modifier Groups after Delete:", selectedModifierGroupsEdit);
});
ðŸ”¹ Fix Explanation:

Used !== instead of != for strict comparison.
Ensured it correctly filters out the deleted modifier ID.
âœ… Fix for Duplicate Entries When Adding a Modifier Group
In your change event handler for #modifierGroupDropdown, update:

js
Copy code
$("#modifierGroupDropdown").change(function () {
    var groupId = $(this).val();

    if (!groupId) {
        $("#modifierList").html(""); // Clear list if no group selected
        return;
    }

    var parentDiv = $("#modifierList");

    // **Check if this modifier group is already added**
    let exists = selectedModifierGroupsEdit.some(modifier => modifier.modifierGroupId == groupId);

    if (exists) {
        console.warn("Modifier group already exists in the array, skipping addition.");
        return;
    }

    $.ajax({
        url: '@Url.Action("GetModifiersByGroup", "Menu")',
        type: 'GET',
        data: { groupId: groupId },
        success: function (response) {
            parentDiv.append(response); // Append new modifier group UI

            // Wait for DOM to update before adding to array
            setTimeout(() => {
                var newGroup = parentDiv.find(".modifier-group").last();

                var minSelection = newGroup.find(".min-input").val();
                var maxSelection = newGroup.find(".max-input").val();

                selectedModifierGroupsEdit.push({
                    modifierGroupId: groupId, // Fix key name
                    minSelection: minSelection,
                    maxSelection: maxSelection
                });

                console.log("Selected Modifier Groups:", selectedModifierGroupsEdit);
            }, 500);
        }
    });
});
ðŸ”¹ Fix Explanation:

Prevent duplicates by checking selectedModifierGroupsEdit.some(...) before adding a new modifier.
Ensures unique entries in selectedModifierGroupsEdit before modifying the DOM.
Correct key names (modifierGroupId) to ensure consistency.
âœ… Final Fix Summary
âœ” Corrected delete filter to retain existing items.
âœ” Prevents duplicate modifier groups in selectedModifierGroupsEdit.
âœ” Ensures selectedModifierGroupsEdit updates correctly after adding/deleting.

This should fix the issue of duplicate
