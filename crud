@model DAL.ViewModel.ItemModifierVM

@if (Model != null)
{
    <div class="modifier-group mt-3 p-2 border rounded" data-groupid="@Model.ModifierGroupId" data-itemid="@Model.ItemId">
        <input type="hidden" name="MenuModifierGroups[@Model.ModifierGroupId].ModifierGroupId"
            value="@Model.ModifierGroupId">

        <div class="d-flex justify-content-between align-items-center">
            <h5>@Model.ModifierGroupName</h5>
            <button type="button" class="btn btn-sm delete-group-edit" data-groupid="@Model.ModifierGroupId">
                <i class="fa fa-trash"></i>
            </button>
        </div>

        <div class="d-flex justify-content-between align-items-center">
            <select class="form-select min-input" asp-for="MinSelection">
                @for (int i = 0; i <= 5; i++)
                {
                    <option value="@i">@i</option>
                }
            </select>
            <select class="form-select max-input" asp-for="MaxSelection">
                @for (int i = 0; i <= 10; i++)
                {
                    <option value="@i">@i</option>
                }
            </select>
        </div>

        <ul class="list-unstyled mt-2">
            @if (Model.MenuModifiers != null && Model.MenuModifiers.Any())
            {
                @for (int i = 0; i < Model.MenuModifiers.Count; i++)
                {
                    var modifier = Model.MenuModifiers[i];
                    <li class="d-flex justify-content-between">
                        <span>• @modifier.ModifierName</span>
                        <span>₹ @modifier.ModifierRate</span>

                        <input type="hidden" name="MenuModifierGroups[@Model.ModifierGroupId].menuModifiers[@i].ModifierId"
                            value="@modifier.ModifierId">
                        <input type="hidden" name="MenuModifierGroups[@Model.ModifierGroupId].menuModifiers[@i].ModifierName"
                            value="@modifier.ModifierName">
                        <input type="hidden" name="MenuModifierGroups[@Model.ModifierGroupId].menuModifiers[@i].ModifierRate"
                            value="@modifier.ModifierRate">
                    </li>
                }
            }
            else
            {
                <li>No modifiers available.</li>
            }
        </ul>
    </div>
}
else
{
    <p>No modifier groups available.</p>
}

<script>
   
        var selectedModifierGroupsEdit = [];
        console.log("inside ModifierGroupId Edit List");

        $(".modifier-group").each(function () {
            var groupId = $(this).data("groupid");
            var itemId = $(this).data("itemid");

            console.log(itemId, groupId);

            $.ajax({
                url: '@Url.Action("GetModifiersGroupByItem", "Menu")',
                type: 'GET',
                dataType: 'json',
                data: { groupId: groupId, itemId: itemId },
                success: function (modifiers) {
                    console.log("Fetched Modifiers for Group:", groupId, modifiers);

                    modifiers.itemModifierGroups.forEach(modifier => {
                        // **Check if the modifier is already in the array**
                        let exists = selectedModifierGroupsEdit.some(existingModifier =>
                            existingModifier.itemId === modifier.itemId &&
                            existingModifier.modifierGroupId === modifier.modifierGroupId
                        );

                        if (!exists) { // **Only push if it doesn't exist**
                            selectedModifierGroupsEdit.push(modifier);
                        }
                    });

                },
                error: function (xhr, status, error) {
                    console.error('Error loading modifiers:', xhr.responseText);
                }
            });
        });

        $("#modifierGroupDropdown").change(function () {
            var groupId = $(this).val();

            if (!groupId) {
                $("#modifierList").html(""); // Clear list if no group selected
                return;
            }

            // Find the parent div where the new modifier group will be appended
            var parentDiv = $("#modifierList");

            $.ajax({
                url: '@Url.Action("GetModifiersByGroup", "Menu")',
                type: 'GET',
                data: { groupId: groupId },
                success: function (response) {
                    // Append the new modifier group to the UI
                    parentDiv.append(response);
                    console.log(selectedModifierGroupsEdit);
                    // Once the partial view is appended, attach event listeners to min/max dropdowns
                    setTimeout(() => {
                        var newGroup = parentDiv.find(".modifier-group").last(); // Get the latest added modifier group

                        var minSelection = newGroup.find(".min-input").val();
                        var maxSelection = newGroup.find(".max-input").val();

                        selectedModifierGroupsEdit.push({
                            modifiergroupid: groupId,
                            minSelection: minSelection,
                            maxSelection: maxSelection
                        });

                        console.log("Selected Modifier Groups:", selectedModifierGroupsEdit);
                    }, 500);
                }
            });
        });
        $(document).on("click", ".delete-group-edit", function () {
            $(this).closest(".modifier-group").remove();
            var deleteid = $(this).data('groupid');
            console.log(deleteid);

            selectedModifierGroupsEdit = selectedModifierGroupsEdit.filter(modifier => modifier.modifierGroupId != deleteid);
            console.log(selectedModifierGroupsEdit);
        });





</script>
